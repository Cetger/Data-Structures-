//Ödev 1



#include <stdio.h>
#include <stdlib.h>
#include <locale.h> 
#include <Windows.h>
#include <unistd.h>
#include <ctype.h>
#include <string.h>


//Ana menümüz.
void firstMenu(){ 
	
	
    printf("\n        -Menü-"); 
	printf("\n 1- Bilgisayar ağları menüsü (Liste)");
	printf("\n 2- Bilgisayar mimarisi menüsü (AVL)");
	printf("\n 3- Her iki dersi birden fazla alan öğrenciler");
	printf("\n 4- Sadece bilgisayar ağları dersini alan öğrenciler");
	printf("\n 5- Bilgisayar ağları A grubu A-K");
	printf("\n 6- Bilgisayar ağları B grubu L-Z");
	printf("\n 7- B. ağları veya B. mimarisi alan E.E ");
	printf("\n 8- Her iki dersi de alanlar adlarına göre sırala");
	printf("\n 9- Sadece bilgisayar ağlarını alanları soyadlarına göre sırala");
	printf("\n 10- Bilgisayar mimarisi alanları numarasına göre sırala ");
	printf("\n 0- Çıkış");
    printf("\n \n Seçiminizi yapın\n \n");
	

}
// Bilgisayar ağları ile alakalı liste işlemlerinie yapacağımız menü
void bilAglariMenu(){
	printf("\n Bilgisayar ağları menüsü\n");
	printf("\n 1- Yeni liste  oluştur");
	printf("\n 2- Listeyi görüntüle");
	printf("\n 3- Araya kayıt ekle");
	printf("\n 4- Bir kaydı sil");
	printf("\n 5- Bir kayıt ara");
	printf("\n 0- Geri");
	printf("\n\n  Seçiminizi yapın.\n");
}

// Bilgisayar mimarisi ile alakalı AVL ağaç işlemlerimizi yapacağımız menü
void bilMimMenusu(){
 
     	printf("\n Bilgisayar Mimarisi Menüsü");
		printf("\n 1- Kayıt ekle:");
        printf("\n 2- Bir kaydı sil:");
        printf("\n 3- Ağacı görüntüle");
        printf("\n 4- Bir kaydı ara");
        printf("\n 0- Geri ");
        printf("\n\n  Seçiminizi yapın.");
 
}

// Bilgisayar ağlari dersini alan öğrenciler için ayrılan yer (Liste)
struct student 
{
	char name[100];
	char surname[100];
	char department[100];
	char studentNo[100];
	char dersalma[100];
	struct student *next;
	
};
struct student *first=NULL,*last=NULL,*k;

// Bilgisayar mimarisi dersini alan öğrenciler için ayrılan yer(Ağaç)
typedef struct Dugum
{
    int no;
    struct Dugum *sol;
    struct Dugum *sag;
    int yukseklik;
    char *ad;
    char *soyad;
    char *bolum;
    char *kdefa;
}Dugum;



/* Programda olumlu ya da olumsuz dönüşler olduğunda 
kullanmak üzere yazılmış iki adet basit melodi*/
void correctSound()
{   //Fa oktav
	Beep(2093/2,200);
	Beep(2093,150);

}

void errorSound(){
	//sol mi do
	Beep(392,300);
	Beep(329,200);
	Beep(261,800);	
}


//Bağlantılı Liste oluşturma
void create_linked_list(int n)
{
int i;
int student_counter=1;
if(n<1)
{   errorSound();
	printf("\nListeye eklenecek kişi sayısı 1'den küçük olamaz.'");
}
   	else if(n>0)
{
	
		first=(struct student*)malloc(sizeof(struct student));
		printf("%d- Öğrencinin adı : \n",student_counter);
		scanf("%s",first->name);
		printf("%d- Öğrencinin soyadı : \n",student_counter);
		scanf("%s",first->surname);
		printf("%d- Öğrencinin numarası : \n",student_counter);
		scanf("%s",first->studentNo);
		printf("%d- Öğrencinin bölümü : \n",student_counter);
		scanf("%s",first->department);
		printf("%d- Öğrenci kaçıncı defa bu dersi alıyor : \n",student_counter);
		scanf("%s",first->dersalma);
		first->next=NULL;
		last=first;
		correctSound();
}	

   else if(n==1)
{
 firstMenu();
}
printf("\n");

for(i=1;i<n;i++){
	student_counter++;
	k=(struct student*)malloc(sizeof(struct student));
	printf("%d- Öğrencinin adı : \n",student_counter);
	scanf("%s",k->name);
	printf("%d- Öğrencinin soyadı : \n",student_counter);
	scanf("%s",k->surname);
	printf("%d- Öğrencinin numarası : \n",student_counter);
	scanf("%s",k->studentNo);
	printf("%d- Öğrencinin bölümü : \n",student_counter);
	scanf("%s",k->department);
	printf("%d- Öğrenci kaçıncı defa bu dersi alıyor : \n",student_counter);
	scanf("%s",k->dersalma);
	printf("\n");
	k->next=NULL;
	last->next=k;
	last=k;
	correctSound();
	if(i==n-1){
		printf("\n Eklemeler yapıldı. Ana menüye dönüyorsunuz.");
	}

 }

}
	
//Bağlantılı Liste arama yapma
void search_in_linked_list(){
	char r[10];	
	int flag=0;
	printf("\n Aramak istediğiniz öğrenci numarasını giriniz");
	scanf("%s",r);
	struct student *t;
	t=first;
	while(t!=NULL)
	{
		if(strcmpi(r,t->studentNo)==0)
		{   correctSound();
			printf("\n Aranan numara listede bulundu.");
			printf("\n Adı :%s ",t->name);
			printf("\n Soyadı :%s ",t->surname);
			printf("\n Numarası :%s ",t->studentNo);
			printf("\n Bölümü :%s ",t->department);
			printf("\n %s. Defa bu dersi alıyor : ",t->dersalma);
			flag=1;
			break;
			
		}
		
		t=t->next;
	}
	if(flag==0)
	{
	errorSound();
	printf("\n Böyle bir numara kaydı bulunmamaktadır. Ana menüye dönüyorsunuz.\n");
	}

}

//Bağlantılı Liste görüntüleme
void display_linked_list(){
	
	int sayac=1;
	struct student *t;
	t=first;
	if(t==NULL)
	{   errorSound();
		printf("\n Listede veri yoktur. Yeni bir işlem seç");
	}
	
	else if(t!=NULL)
	{   correctSound();
		printf("\n Bilgisayar ağlarını alanlar listesi \n");
	}
	
	while(t!=NULL)
    {    
        printf("\n Adı : %s",t->name);
		printf("\n Soyadı : %s",t->surname);
		printf("\n Numarası : %s",t->studentNo); 	
   	 	printf("\n Bölümü : %s",t->department);
   	 	printf("\n Dersi alma : %s\n\n",t->dersalma);
   	 	t=t->next;
   	 	sayac++;	 	
    }
}

//Bir kayıttan sonra veri ekleme
void insertAfter(){
	char r[10];
	int flag=0;
	printf("\n Hangi numaradan sonra veri eklenecek?");
	scanf("%s",r);
	struct student *t;
	t=first;
	while(t!=NULL)
	{
      if(strcmpi(r,t->studentNo)==0)
	  {
		
		k=(struct student*)malloc(sizeof(struct student));
		printf("\n Eklenecek öğrencinin adı: ");
		scanf("%s",k->name);
		printf("\n Eklenecek öğrencinin soyadı: ");
		scanf("%s",k->surname);
		printf("\n Eklenecek öğrencinin numarası: ");
		scanf("%s",k->studentNo);
		printf("\n Eklenecek öğrencinin bölümü");
		scanf("%s",k->department);
		printf("\n Eklenecek öğrenci bu dersi kaçıncı kez alıyor?");
		scanf("%s",k->dersalma);
		k->next=t->next;
		t->next=k;
		flag=1;
		correctSound();
		break;
	  } 
     t=t->next;
	}
	
	if(flag==0){
		errorSound();
		printf("\n Listeye ekleme işlemi tamamlanamadı\n");
	}
	firstMenu();
}

//Listeden veri silme

void delete_from_linkedlist()
{
	struct student *back,*k;
	char r[10];
	int flag=0;
	back=first;
	if(back==NULL)
	{   errorSound();
		printf("\n Listede veri yoktur. Yeni bir işlem seçiniz");
		firstMenu();
	}
	else
	{
		
		printf("\n Silmek istediğiniz öğrencinin numarasını giriniz.");
		scanf("%s",r);
		if(strcmpi(r,first->studentNo)==0)
		{
			first=first->next;
			flag=1;
		}
		else
		{
			back=first;
			k=first->next;
			
			while(k!=NULL) 
			{
				if(strcmpi(r,k->studentNo)==0)
				{
					back->next=k->next;
					flag=1;
					break;
				}
			}
		}
		if(flag==1)
		{   correctSound();
			printf("\n Kayıt silindi");
		}
		
		else if(flag==0){
			errorSound();
			printf("\n Bulunamadı");
		}
	}
}

// BURADAN SONRA AVL İLE ALAKALI gereken fonksiyonlar vs.



// Hangi sayı daha büyük return eden fonksiyon. Kütüphane çakışması yüzünden maxx adını verdik. 
 int maxx(int a,int b);

int maxx(int a, int b)
{
    return (a > b)? a : b;
}
 
// Ağacın yüksekliği için yazdığımız fonksiyon
int yukseklik(struct Dugum *N)
{
    if (N == NULL)
        return 0;
    return N->yukseklik;
}
 

/* Yeni düğüm oluşturma 
No öğrenci no
A ad
S soyad
B bölüm
K dersi kaç defa alıyor.

 */
 
struct Dugum* newNode(int no,char a[20],char s[20], char b[20],char k[20])
{
    struct Dugum* node = (struct Dugum*)
                        malloc(sizeof(struct Dugum));
    node->no   = no;
    node->ad=a;
    node->soyad=s;
    node->bolum=b;
    node->kdefa=k;
    node->sol   = NULL;
    node->sag  = NULL;
    node->yukseklik = 1;  
    return(node);
}
 
 
//Sağa dönderme için
struct Dugum *sagdon(struct Dugum *y)
{
    struct Dugum *x = y->sol;
    struct Dugum *T2 = x->sag;
 
    x->sag = y;
    y->sol = T2;
 
    // Yüksekliği güncelleme
    y->yukseklik = maxx(yukseklik(y->sol), yukseklik(y->sag))+1;
    x->yukseklik = maxx(yukseklik(x->sol), yukseklik(x->sag))+1;
 
    return x;
}
 
//Sola dönderme
struct Dugum *soldon(struct Dugum *x)
{
    struct Dugum *y = x->sag;
    struct Dugum *T2 = y->sol;
 
    y->sol = x;
    x->sag = T2;
 
     //Yükseklik güncelleme 
    x->yukseklik = maxx(yukseklik(x->sol), yukseklik(x->sag))+1;
    y->yukseklik = maxx(yukseklik(y->sol), yukseklik(y->sag))+1;
 
    return y;
}
 
// Denge kontrolü yapıyoruz.
int dengecontrol(struct Dugum *N)
{
    if (N == NULL)
        return 0;
    return yukseklik(N->sol) - yukseklik(N->sag);
}

/* insert etme fonksiyonumuz.
no,a,s,b,k new ile aynı 
*/
struct Dugum* insert(struct Dugum* node, int no,char a[20], char s[20], char b[20],char k[20])
{
    
    if (node == NULL)
        return(newNode(no,a,s,b,k));
 
    if (no < node->no)
        node->sol  = insert(node->sol, no,a,s,b,k);
    else if (no > node->no)
        node->sag = insert(node->sag, no,a,s,b,k);
    else 
        return node;
 
    /* 2. Yükseklik güncelleme tekrar. */
    node->yukseklik = 1 + maxx(yukseklik(node->sol),
                           yukseklik(node->sag));
 
    /* 3. Denge kontrolümüzü yapıyoruz. */
    int denge = dengecontrol(node);
 
    // 4 farklı durum olabilir.
 
    // sola çift dönüş
    if (denge > 1 && no < node->sol->no)
        return sagdon(node);
 
    // sağa çift dönüş
    if (denge < -1 && no > node->sag->no)
        return soldon(node);
 
    // sağ dönüş
    if (denge > 1 && no > node->sol->no)
    {
        node->sol =  soldon(node->sol);
        return sagdon(node);
    }
 
    // sol dönüş
    if (denge < -1 && no < node->sag->no)
    {
        node->sag = sagdon(node->sag);
        return soldon(node);
    }
 
   
    return node;
}
 
/* Minumum değeri almak için yazıyoruz. 
 Basit bir mantığı var, sürekli sola git taa ki NULL bulana kadar. */
struct Dugum * minValueNode(struct Dugum* node)
{
    struct Dugum* current = node;
 
    /* loop down to find the leftmost leaf */
    while (current->sol != NULL)
        current = current->sol;
 
    return current;
}
 
/* Bir düğümü silmek için gereken kodlar, düğümü no ya göre seçiyoruz. */
struct Dugum* deleteNode(struct Dugum* root, int no)
{
    // Düğüm boşsa geri dönüyoruz.
 
    if (root == NULL)
        return root;
 
    // No parametresine göre sola ya da sağa gidip, o düğümü arıyoruz. 
    if ( no < root->no )
        root->sol = deleteNode(root->sol, no);
 
    
    else if( no > root->no )
        root->sag = deleteNode(root->sag, no);
 
   
    else
    {
        // Bir ya da hiç çocuk olma durumu
        if( (root->sol == NULL) || (root->sag == NULL) )
        {
            struct Dugum *temp = root->sol ? root->sol :
                                             root->sag;
 
            // Hiç çocuk yoksa
            if (temp == NULL)
            {
                temp = root;
                root = NULL;
            }
            else // Bir çocuk varsa
             *root = *temp; 
            free(temp);
        }
        else
        {
            // iki çocuklu düğüm sağ ağacın en küçüğünü alıyoruz.
            struct Dugum* temp = minValueNode(root->sag);
 
            root->no = temp->no;
 
            // Düğümü siliyoruz.
            root->sag = deleteNode(root->sag, temp->no);
        }
    }
 
    // Ağacın tek bir düğümü verse geri dönüyoruz.
    if (root == NULL)
      return root;
 
    // Yeni durumdaki yüksekliği güncelliyoruz.
    root->yukseklik = 1 + maxx(yukseklik(root->sol),
                           yukseklik(root->sag));
 
    // Gerekli denge kontrolünü yapıyoruz.
    int denge = dengecontrol(root);
 
   // Yine klasik 4 durum var, dengelenene kadar bu kontroller ve işlemler yapılır.
 
    if (denge > 1 && dengecontrol(root->sol) >= 0)
        return sagdon(root);
 
    if (denge > 1 && dengecontrol(root->sol) < 0)
    {
        root->sol =  soldon(root->sol);
        return sagdon(root);
    }
 
    if (denge < -1 && dengecontrol(root->sag) <= 0)
        return soldon(root);
 
    if (denge < -1 && dengecontrol(root->sag) > 0)
    {
        root->sag = sagdon(root->sag);
        return soldon(root);
    }
 
    return root;
}
 
//preOrder şekilde sıralama (KÖK SOL SAĞ)
void preOrder(struct Dugum *root)
{
    if(root != NULL)
    {
        printf("Öğrenci no: %d Adı:%s Soyadı: %s Bölümü: %s ve %s Defadır alıyor.   \n", root->no,root->ad,root->soyad,root->bolum,root->kdefa);
        preOrder(root->sol);
        preOrder(root->sag);
    }
}


/*İki dersten en az birini alan e.e.m. öğrencileri için yazdığımız fonksiyon. 
Burada ağaç içindeki bölümü eem olan her öğrenci yazdırılıyor.
Bu ağaca, Bağlı listede olup fakat ağaçta olmayanları ekleyeceğiz 
böylece iki dersten en az birini alan öğrencileri yazdıracağız.
*/

void eemenaz(struct Dugum *root)
{
if(root != NULL)
    {  if(strcmp(root->bolum,"eem")==0)
        printf("Öğrenci no: %d Adı:%s Soyadı: %s Bölümü: %s ve %s Defadır alıyor.   \n", root->no,root->ad,root->soyad,root->bolum,root->kdefa);
        eemenaz(root->sol);
        eemenaz(root->sag);
    }
}

/*
  2.C)
  Bilgisayar ağları sınıfını(Listeyi) Soyadlarına göre A-K ve L-Z şeklinde yazdırın.
  Bu fonksiyon en genel geçer şekliyle şu mantıkla yazılır:
  Liste baştan sona gezilir, ve gerekli koşulun durumuna bakılır.  

 */
// Soyadları A-K olanları listeleme
void bilgA_K(){
	   struct student *t;
	   t=first;
	   char temp[1]="k";
        if(t==NULL)
	{   errorSound();
		printf("\n Listede veri yoktur. Yeni bir işlem seç");
	}else if(t!=NULL)
	{   correctSound();
		printf("\n Soyadına göre listelenmiş A-K listesi\n");
	}
	while(t!=NULL)
    {  
       
	     if(strcmp(t->surname,temp)<0)
	     printf("Soyadı :%s, Adı :%s, Numarası :%s \n",t->surname,t->name,t->studentNo);
   		 t=t->next;
}

}
// Soyadları L-Z olanları Listeleme
void bilgL_Z(){
	   struct student *t;
	   t=first;
	   char temp[1]="k";
        if(t==NULL)
	{   errorSound();
		printf("\n Listede veri yoktur. Yeni bir işlem seç");
	}else if(t!=NULL)
	{   correctSound();
		printf("\n Soyadına göre listelenmiş L-Z listesi\n");
	}
	while(t!=NULL)
    {  
       
	     if(strcmp(t->surname,temp)>0)
	     printf("Soyadı :%s, Adı :%s, Numarası :%s \n",t->surname,t->name,t->studentNo);
    	
	
   		 t=t->next;
}

}

/* onlyBilAg
   2.B)
   Sadece bilgisayar ağları dersini alan öğrenciler.(Bunlar Bil. Mimarisi almıyor olacak)
   Bunu yapmak için bilgisayar ağları listesini tek tek okuyup, listedeki her elemanın
   bilgisayar mimarisi ağacında olup olmadığını kontrol etmeliyiz, eğer ağaçta varsa 
   direkt o değeri atlayıp, listedeki diğer öğrenci için işlem devam etmeli taa ki liste bitene kadar.
   Bunun için ortak değer bulma durumunda diğer liste elemanına geçecek şekilde basit bir goto kodu kullandık.
   
   ***Burada önemli olan burayı kontrol edeceğim****
*/

void onlyBilAg(struct Dugum *root){
	struct student *t;
	 t=first;
	 struct Dugum *bas;
	 bas=root;
	 int flag=0;
        if(t==NULL)
	{   errorSound();
		printf("\n Bilgisayar ağları dersini alan kimse yok.");
	}else if(t!=NULL)
	{   correctSound();
		printf("\n Sadece Bilgisayar ağlarını alanlar listesi \n");
	}
	while(t!=NULL)
    {   flag=0;   
		 	
		int n =atoi(t->studentNo);
		
		 while(root!=NULL)
		   {
           if(n<root->no) 
		   { 
               root=root->sol;
           	     		  	           }
           else if(n>root->no)
		    { 
               root=root->sag;
         							   }
           else if(n==root->no)
		   {    
		   	    /* Eğer ortak öğrenci varsa, bunu hesaba katmayıp listeden devam etmemizi sağlayan kısım */
		   	    flag =1;
		   	    root=bas;
				goto b; 
            }
   	 	 	
   		 }
   		b:	 if (flag==0)printf("Adı : %s, Soyadı : %s, Numarası : %s",t->name,t->surname,t->studentNo);
   		 t=t->next;
}
}



/*  birdenfazla
    2.A)
    Her iki dersi de birden fazla kez alan öğrenci listeleyiniz.
    Burada temel olarak şunu söyleyebiliriz. Eğer iki dersi de birden fazla kez alan öğrencileri arıyorsak;
	evvela bu öğrenci iki dersi de alıyor olmalı, yani iki listede de olmalı. 
	Çözüm yolu olarak şunu izlemeliyiz. 
	İki yapıda da olan öğrenciyi bul ve bu öğrenci iki dersi de birden fazla alıyorsa yazdır.
    
    Biz temel olarak bir yapıyı baştan sona gezip, her bir eleman diğer yapıda olup olmadığını arayacağız.   
	Fakat burada iki şekilde probleme yaklaşmak mümkün.
	  (Diyelim ki ağaç n, liste m elemanlı olsun.)								

	1) Ağacın bir elemanını alıp, listede aramak.
	2) Listenin bir elemanını alıp, ağaçta aramak. 
	
	Biz 2. yolu seçtik çünkü; Eğer 1. yolu seçsek nxm complexity'e sahip olacaktı kodumuz. 
	Fakat 2. yolu seçerek mxlogn complexity'e sahip olduk.
	
 
 */

void birdenfazla(struct Dugum *root){
	 
	 struct student *t;
	 t=first;
	 struct Dugum *bas;
	 bas=root;
        if(t==NULL)
	{   errorSound();
		printf("\nListede veri yoktur. Yeni bir işlem seç");
	}else if(t!=NULL)
	{   correctSound();
		printf("\n Bilgisayar ağlarını alanlar listesi \n");
	}
	while(t!=NULL)
    {    
		 	
		int n =atoi(t->studentNo);
		if(atoi(t->dersalma)>1) // listede 1 den fazla olan ders almaları listeliyor.
		
		 
		 
		 while(root!=NULL)
		   {
		   	
           if(n<root->no) 
		   { 
               root=root->sol;
           	     		  	           }
           else if(n>root->no)
		    { 
               root=root->sag;
         							   }
           else if(n==root->no )
		   {    if(atoi(root->kdefa)>1 && atoi(t->dersalma)>1)
		   	    printf("\nÖğrenci no : %d Bilg. Ağ dersi alma sayısı: %s ve Bilg. Mimarisi ders alma sayısı :%s \n ",n,t->dersalma,root->kdefa );
		   	    
                root=bas;
				goto b; 
            }
   	 	 	
   		 }
   		 b:	t=t->next;

}
}



/*
   eem
   2.D)
   Bilgisayar Ağları ve Bilgisayar Mimarisi derslerinin en az birini alan öğrencileri yazın.
   
   Bunun içinde temel olarak iki yapıyı da iç içe dolanmak gerekiyor. 
   Biz şu yolu tercih ettik. İlk önce ağacı baştan sona dolaşıp "eem" etiketiyle örtüşenleri yazdırdık.
   Sonra  listenin içinde "eem" ile çakışanlara tek tek baktık ve şunu kontrol ettik:
   Eğer listenin içindeki eem öğrencisi ağacın içinde de varsa bunu es geçtik, çünkü ağacın içindeki 
   bütün eem öğrencilerini yazdırmıştık. Bize gereken kısım sadece listede olan eemleri bulup yazmaktı.
   
   Bu fonksiyonu iç içe iki döngü şeklinde düşünebiliriz peki neden biz bu yolu seçtik? 
   Çünkü ağaç gezinme algoritmaları recursive olduğu için, bunu iç kısma yazmak tehlikeli olabilirdi. 
   
   Nihayetinde nasıl yazılırsa yazılsın: Bir yapı tamamen diğer yapı ise kesişim içinde olmayan kısmı,
   eklenecek şekilde yapılırsa bu fonksiyon yazılırdı. Ağacı tamamen yazmayı tercih ettik. 

*/
void eem(struct Dugum *root){
	 
	 struct student *t;
	 t=first;
	 struct Dugum *bas;
	 bas=root;
	 eemenaz(root); //ağaçta tüm eem leri listeledik.
        if(t==NULL)
	{   errorSound();
		printf("\nBilgisayar ağları dersini alan öğrencisi yok. \n");
	}else if(t!=NULL)
	{   correctSound();
		printf("\n Bilgisayar ağlarını alanlarından eem listesi: \n");
	}
	while(t!=NULL) //burada tüm liste eem listele ama ağaçta olan eem çıkart
    {    		 	
		int n =atoi(t->studentNo); //deki bu ağaçta var mı 
          while(root!=NULL)
		   {
		   	
           if(n<root->no) 
		   { 
               root=root->sol;
           	     		  	           }
           else if(n>root->no)
		    { 
               root=root->sag;
         							   }
           else if(n==root->no )
		   {    
		   //bu öğrenci ağaçta varsa zaten ağaç sıralanırken listelenmiş olacak
		   //diğer liste elemanından devam edecek, listeden devam et ve ağacı başa al.
		  		root=bas;
				goto b; 
            }
   	 	 	
   		 }
   		 if(strcmp(t->department,"eem")==0){
   		 	printf("Sadece eem öğrencisi olup, listede olanlar");
   		 	printf("ad: %s, soyad: %s, öğrenci no:%s ",t->name,t->surname,t->studentNo);
			}
   		 b:	t=t->next;

}
}


/* 
  searchavl
  Ağaç içerisine int n şeklinde yollanmış bir parametrenin olup, olmadığını arayan fonksiyon.
  Temel searchAVL mantığı kullandık, koşula göre sağa ya da sola gidiyor. Fonksiyon ya aranan
  sayı bulununca ya da artık gidecek bir ağaç kalmayıp, NULL değerine ulaşınca bitiyor.

*/


 void searchavl(struct Dugum *root,int n) {
           int sayac=1;
           
           while(root!=NULL){
           if(n<root->no) { 
                             root=root->sol;
                             sayac++;
                             
                             }
           else if(n>root->no) { 
                             root=root->sag;
                             
                             sayac++;
                              }
           else { printf("\n Aranan %d sayisi %d. adimda bulundu.\n",n,sayac);
              	  printf("\n Ad: %s, Soyad: %s, No: %d",root->ad,root->soyad,root->no);
                  return; 
                }
                
                }
                printf("\n Ne yazikki olmayan bir deger girdiniz, bulamadik\n");
           }


void sortA(struct Dugum *root){
	struct student *t;
	 t=first;
	 struct Dugum *bas;
	 bas=root;
	 int flag=0;
	 int i,j,count;	
	 char str[25][25],temp[25];
     
	    if(t==NULL)
	{   errorSound();
		printf("\nListede veri yoktur.");
	}else if(t!=NULL)
	{   correctSound();
		printf("\n Her iki dersi de alan öğrencilerin ad listesi: \n");
	}
	while(t!=NULL)
    {   flag=0;   
		 	
		int n =atoi(t->studentNo);
		
		 while(root!=NULL)
		   {
           if(n<root->no) 
		   { 
               root=root->sol;
           	     		  	           }
           else if(n>root->no)
		    { 
               root=root->sag;
         							   }
           else if(n==root->no)
		   {    
		   	    printf("\n Ad :%s \n",root->ad);
		   	    count++;
		   	    root=bas;
				goto b; 
            }
   	 	 	
   		 }
   		b:t=t->next;
}

   puts("Ortak öğrenciler yukarda gösterildi, \n Bunları lütfen girin. ");
   for(i=0;i<=count;i++)
      gets(str[i]);
      
    for(i=0;i<=count;i++)
      for(j=i+1;j<=count;j++){
         if(strcmp(str[i],str[j])>0){
            strcpy(temp,str[i]);
            strcpy(str[i],str[j]);
            strcpy(str[j],temp);
         }
      }
   printf("\n Sıralanmış liste");
   for(i=0;i<=count;i++)
      puts(str[i]);
 
}

void sortB(){
     struct student *t;
	 t=first;
	 int count=0;

	 int i,j;
	 char str[25][25],temp[25];
     
	    if(t==NULL)
	{   errorSound();
		printf("\n Listede veri yoktur.\n");
	}else if(t!=NULL)
	{   correctSound();
		printf("\n Bilgisayar ağlarını alanlar listesi \n");
	}
	while(t!=NULL)
    {	printf("\n %s",t->name);
	    count++;
	   	t=t->next;

} 

printf("\n Lütfen sıralamak istediğiniz isimleri girin \n");
for(i=0;i<=count;i++)
      gets(str[i]);
   for(i=0;i<=count;i++)
      for(j=i+1;j<=count;j++){
         if(strcmp(str[i],str[j])>0){
            strcpy(temp,str[i]);
            strcpy(str[i],str[j]);
            strcpy(str[j],temp);
         }
      }
   printf("Sıralanamadan sonra: \n");
   for(i=0;i<=count;i++)
      puts(str[i]);
}

void sortC(struct Dugum *root)
{   
    if(root != NULL)
    {
        sortC(root->sol);     
		printf("%d \n",root->no); 
		sortC(root->sag); 
    }

}

int main(int argc, char *argv[]) {


    setlocale(LC_ALL, "Turkish"); 
    system("COLOR F1");
    int o,n;
    int sMenu=9;
    struct Dugum *root = NULL;
   
    while(1)
    {
    	
    		firstMenu();
	
		scanf("%d",&sMenu);
		
		if(sMenu==1){
			bilAglariMenu();
			scanf("%d",&o);
			switch(o)
			{
				case 1:{
					printf("\n Liste kaç kişiden oluşacak ? \n");
					scanf("%d",&n);
					create_linked_list(n);
					break;
				}
				case 2:{
					display_linked_list();
					break;
				}
				case 3:{
					insertAfter();
					break;
				}
				case 4:{
					delete_from_linkedlist();
					break;
				}
				case 5:{
					search_in_linked_list();
					break;
				}
				case 0:{
					firstMenu();
					break;
				}
				default: {
					printf("\nBir şeyler ters gitti, tekrar seçim yapın.");
					bilAglariMenu();
					break;
				}
			}
		}
		
		else if(sMenu==2){
			bilMimMenusu();
			scanf("%d",&o);
			switch(o){
				case 1:{
				       printf("\nEkleme yapılıyor. \n");
				       root = insert(root, 12,"Çilem",   "Akçay",     "bm", "1");
   		 			   root = insert(root, 5, "Kutlu",   "Alibeyoğlu","bm", "2");
 		   			   root = insert(root, 14,"Muhammed","Erdoğan",   "eem","1");
	  	   		       root = insert(root, 32,"Mete",    "Korkut",    "bm", "5");
  					   root = insert(root, 7, "Merve",   "Altıok",    "bm", "1");
  					   root = insert(root, 4, "Eşref ",  "Şeref",     "bm", "1");
  					   root = insert(root, 27,"Dilara",  "Taçgın",    "bm", "1");
 					   root = insert(root, 64,"Baran",   "Demir",     "eem","1");
 					   root = insert(root, 44,"Ecenur",  "Tokgöz",    "bm", "1");

					    break;
				}
				
				case 2:{
					   printf("\nSilinecek öğrencinin numarasını gir");
					   scanf("%d",&n);
					   root = deleteNode(root,n);
					
					break;
				}
				
				case 3:{
					   printf("\nListeleniyor.\n");
	 				   preOrder(root);
					break;
				}
				
				case 4:{
					printf("Aranacak sayıyı gir");
	 				scanf("%d",&n);
	 				searchavl(root,n);
					break;
				}
				case 5:{
					firstMenu();
					break;
				}
				default:{
					printf("Bir şeyler yanlış gitti. Tekrar seçim yap");
					break;
				}
				
			}
			
		}
 		else if(sMenu==3){
		 birdenfazla(root);	
		 }
		 else if(sMenu==4){
		 	onlyBilAg(root);
		 }
		 else if(sMenu==5){
		 	bilgA_K();
		 }
		 else if(sMenu==6){
		 	bilgL_Z();
		 }
		 else if(sMenu==7){
		 		eem(root);
		 }
		 else if(sMenu==8){
		 	sortA(root);
		 }
		 else if(sMenu==9)
		 {
		 sortB();
		 }
		 else if(sMenu==10)
		 {  
		 if(root==NULL){
		 	errorSound();
			 printf("\n Bilgisayar mimarisi dersini alan kimse yok!");
		 }
		 else{
		 
		 printf("\n \n Listeleniyor. \n");
		 	sortC(root);}
		 }
		 
		 else if(sMenu==0){
		 	exit(0);
		 }
	else{
	
		printf("\nBir şeyler çok ters gitti. Tekrar seçim yapın.");
		firstMenu();
	}
    
}




	return 0;
}

